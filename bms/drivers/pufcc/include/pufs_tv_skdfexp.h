/**
 * @file      pufs_tv_skdfexp.h
 * @brief     PUFsecurity test vectors for SKDF key expansion
 * @copyright 2021 PUFsecurity
 */
/* THIS SOFTWARE IS SUPPLIED BY PUFSECURITY ''AS IS'' AND ANY EXPRESS
 * OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHORS OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
 * BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
 * OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
 * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. TO THE FULLEST
 * EXTENT ALLOWED BY LAW, PUFSECURITY'S TOTAL LIABILITY ON ALL CLAIMS IN
 * ANY WAY RELATED TO THIS SOFTWARE WILL NOT EXCEED THE AMOUNT OF FEES,
 * IF ANY, THAT YOU HAVE PAID DIRECTLY TO PUFSECURITY FOR THIS SOFTWARE.
 */

#ifndef __PUFS_TV_SKDFEXP_H__
#define __PUFS_TV_SKDFEXP_H__

static const struct kdf2_test_pattern
#ifndef __KDF2_TEST_PATTERN__
#define __KDF2_TEST_PATTERN__
{
    pufs_hash_t hash;
    bool feedback;
    uint32_t ctrpos;
    uint32_t ctrlen;
    uint32_t kilen;
    const void* ki;
    uint32_t infolen;
    const void* info;
    uint32_t ivlen;
    const void* iv;
    uint32_t outlen;
    const void* ko;
}
#endif /* __KDF2_TEST_PATTERN__ */
skdf2_tp[] =
{
#ifdef PUFS_TV_FULL
    { SHA_224, false, 0, 4,
        1, "\x00",
        75, "\xdf\xd0\x57\x0d\x4a\xe5\xc9\xf6\x90\xc7\x57\xae\xad\x04\xf7\xe1\x47\x58\xfd\xc4\xee\x05\xd8\xf0\xd0\x89\xb9\x1a\xa1\xb2\xc3\xd4\xe5\x43\x41\x56\x53\x69\x64\xa6\xa6\x8a\x65\xab\x05\x65\x2a\x9c\xb3\x15\x2d\x9b\xdf\x5d\x35\x26\x99\x5a\xfa\xe1\x89\x66\x7f\x96\xe1\x3d\xa1\x7a\x90\x5f\xf0\xb2\xb9\xb5\xbf",
        0, NULL,
        14, "\x24\xb6\xb6\xe6\xd1\x0b\x2e\x54\x82\xc2\x0b\xa3\xb0\x6c",
    },
    { SHA_256, false, 0, 4,
        1, "\x00",
        79, "\xb2\x93\x6b\xd7\x5e\xee\x3f\x81\x57\x42\xa7\xa5\x45\xc0\x80\x48\x5b\xea\x73\x09\x97\xfa\xe4\x42\x2a\xac\xda\xdf\x23\x8d\x7a\xfb\xa1\xb2\xc3\xd4\xe5\x43\x41\x56\x53\x69\x64\xd8\x69\x3c\x63\x7f\x23\x3a\x22\x54\xab\xcf\x18\x8f\xe5\xa1\x66\x99\x26\xfd\x34\xcf\xec\xbd\x00\x82\xcc\x6f\x35\x42\xab\xb3\x00\x5c\x31\xe5\x5f",
        0, NULL,
        16, "\x66\xb6\xe1\x38\x97\x50\xf7\xf3\x90\xbf\x1e\x0f\x0f\x4c\xd7\xdc",
    },
    { SHA_384, false, 0, 4,
        1, "\x00",
        95, "\xef\x11\x04\xcf\xde\x9c\x34\xdc\x4b\x3e\x6e\xc6\x9a\x85\xff\x2e\xf8\x50\xcb\x8e\x93\x5c\xbe\xfb\x8b\x00\xa4\xa6\x4d\x90\xc9\xfd\x00\x49\x47\x02\x34\xb2\xbb\xf9\x1c\x53\x59\x57\x5e\xd0\x1f\x01\xa1\xb2\xc3\xd4\xe5\x43\x41\x56\x53\x69\x64\x44\x89\x81\x33\x7b\xfd\x17\xd6\xa7\x7c\xd5\x31\x18\xe4\xab\xc5\x5a\x61\xa7\xb8\x0a\xee\x68\x7c\xe9\x18\xd6\xac\x2f\x05\x10\x36\x22\xb6\xa6\xbf",
        0, NULL,
        24, "\x2c\x96\x5c\x29\xc0\xc2\xeb\x31\xf1\x00\x54\x59\x02\x96\x12\x56\x0c\xcf\x3c\x5a\xdb\xa4\xae\x72",
    },
#endif
    { SHA_512, false, 0, 4,
        1, "\x00",
        113, "\x00\x77\xbd\xfa\x5f\x7f\xea\xcc\x05\x5a\xf3\x54\xa9\x3c\xa8\x48\x45\x4c\x4c\x06\x36\xfd\x78\xe3\x41\x91\xc5\x18\x9c\xd0\x72\xac\x88\x41\xed\xf5\x1e\x08\x6e\xde\x6d\x2b\x8a\x6f\xe3\x7f\x0a\x35\x7a\x04\x99\x27\x64\xbd\x1c\xb1\x60\x3c\x51\x9b\x21\x3b\x6a\xd4\x2f\x67\xa1\xb2\xc3\xd4\xe5\x43\x41\x56\x53\x69\x64\x69\x1c\xff\x51\x9b\x6d\x9a\x18\xbb\xed\xbc\x0b\x16\x84\x3d\xf4\x59\xfb\x55\x79\xa7\xbc\x53\xfc\xe9\xd9\x91\xbf\x65\x50\xa7\x4c\x93\x8e\xdf\x14",
        0, NULL,
        32, "\x7f\xde\x9c\x7f\xdf\x13\x4b\x7f\x2a\xd7\xf0\xcf\x91\x52\x8d\x1f\x03\x6b\x36\x5a\x5c\x4f\xfc\x17\x5f\xc7\x29\xde\xb6\x13\xbd\x78",
    },
};

#endif /* __PUFS_TV_SKDFEXP_H__ */
