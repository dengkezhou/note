/**
 * @file      pufs_tv_hkdfexp.h
 * @brief     PUFsecurity test vectors for HKDF key expansion
 * @copyright 2020 PUFsecurity
 */
/* THIS SOFTWARE IS SUPPLIED BY PUFSECURITY ''AS IS'' AND ANY EXPRESS
 * OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHORS OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
 * BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
 * OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
 * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. TO THE FULLEST
 * EXTENT ALLOWED BY LAW, PUFSECURITY'S TOTAL LIABILITY ON ALL CLAIMS IN
 * ANY WAY RELATED TO THIS SOFTWARE WILL NOT EXCEED THE AMOUNT OF FEES,
 * IF ANY, THAT YOU HAVE PAID DIRECTLY TO PUFSECURITY FOR THIS SOFTWARE.
 */

#ifndef __PUFS_TV_HKDFEXP_H__
#define __PUFS_TV_HKDFEXP_H__

static const struct kdf2_test_pattern
#ifndef __KDF2_TEST_PATTERN__
#define __KDF2_TEST_PATTERN__
{
    pufs_hash_t hash;
    bool feedback;
    uint32_t ctrpos;
    uint32_t ctrlen;
    uint32_t kilen;
    const void* ki;
    uint32_t infolen;
    const void* info;
    uint32_t ivlen;
    const void* iv;
    uint32_t outlen;
    const void* ko;
}
#endif /* __KDF2_TEST_PATTERN__ */
hkdf2_tp[] =
{
#ifdef PUFS_TV_FULL
    { SHA_256, false, 0, 1,
        32, "\x63\xa6\x57\xfb\x6c\x5b\xac\xb9\xa1\x24\xd3\xe7\xdb\x8b\xbb\x7d\x42\xbf\xdf\xaf\x8f\x04\xcb\x63\x59\xcd\x88\x8c\x70\x66\x96\x52",
        60, "\x26\x97\xb6\xec\x11\x2c\xab\x4d\x6f\x17\x14\xc9\x91\xc1\x7d\x44\xfb\x36\xa0\xb6\xef\x0b\x0f\x54\x51\x61\x9a\xb2\x48\x95\x0f\x56\xf4\x03\x21\x5c\x78\x71\x1a\xa5\x63\x68\x3c\xed\x05\xbe\x72\x46\xf3\x25\x74\xfa\x29\x4f\x16\x2d\xbb\xeb\x3d\xee",
        0, NULL,
        40, "\x19\x92\xe7\x57\x56\xfa\x64\x73\x4d\x5c\xae\xcc\x5f\x64\x20\xfc\xb2\x8b\x8b\x90\x42\x1e\xee\x97\xdc\x8b\x61\x40\xce\x18\x51\x84\x05\x68\x8b\xea\x48\x9d\x2a\xaa"
    },
    { SHA_256, false, 60, 3,
        32, "\x33\x76\x0c\x18\xaf\xd7\x1a\x88\x8b\x99\xd1\x66\x9f\x5c\x56\x38\x9e\x1f\x12\xd2\x58\xe5\xe8\x89\xaf\xaa\x89\x45\xb0\xa5\x04\xdf",
        60, "\x3e\xe2\x1c\x81\xad\x64\x99\x02\x84\xc2\xa5\x2e\x96\xa9\x06\x22\xf5\xb8\xc0\x86\xbe\xa4\x70\x07\x90\xb6\xc6\x50\xee\x8e\x9f\x7f\x6c\xe3\xd7\xef\xef\x99\xac\xde\x50\xf9\x27\x51\x96\x35\x1d\xd3\xcc\x51\x13\xb0\x5e\x0e\x7d\xda\x73\x3e\x3b\x0a",
        0, NULL,
        40, "\x46\xf5\xe3\xae\x03\xad\x1a\x0c\x4e\x53\x30\x36\x92\xbf\xa1\xc6\x32\x8f\x54\x46\x3d\xbf\xd8\xb9\x43\x54\x02\xd5\x7a\xc2\x24\x89\xa1\x1e\x47\xae\x78\x48\x79\x4e"
    },
    { SHA_256, false, 50, 4,
        32, "\x83\x94\x2c\xf6\xcf\xcc\x3e\x5f\xac\x04\x5e\xef\x7c\x8e\x97\x25\x4b\xec\x62\xdb\x38\x47\xa9\xc2\x12\xa4\x59\xc4\x10\x47\xc2\xba",
        60, "\x57\x08\x0e\x10\x65\x0d\x31\x37\x08\xc3\xe8\x3b\xa7\x61\xcf\x98\xbc\x2c\xa7\x91\x87\xda\x95\x40\x42\x4e\xe8\x41\x4e\x5c\x61\x7c\xc7\xcc\xcc\xd5\x3d\xf1\xb7\x50\x60\xeb\x72\x37\xbe\x4b\xbb\x02\xbb\xd0\x2f\xfb\x3a\xf2\xc5\x3f\x45\x18\xdf\xec",
        0, NULL,
        40, "\x79\xad\xfd\xa2\xe7\xab\xe1\x51\x9f\x1b\xe8\xd3\x50\x0d\xb5\xe4\xea\x8c\x96\xec\x9e\xef\x3d\xe1\xab\xf7\x6e\xaa\x3c\x0c\xb7\xb4\x87\x60\x3c\x69\x74\xda\x04\xff"
    },
    { SHA_256, true, 2, 1,
        32, "\x07\x77\x09\x36\x2c\x2e\x32\xdf\x0d\xdc\x3f\x0d\xc4\x7b\xba\x63\x90\xb6\xc7\x3b\xb5\x0f\x9c\x31\x22\xec\x84\x4a\xd7\xc2\xb3\xe5",
        10, "\xf0\xf1\xf2\xf3\xf4\xf5\xf6\xf7\xf8\xf9",
        0, NULL,
        42, "\x3c\xb2\x5f\x25\xfa\xac\xd5\x7a\x90\x43\x4f\x64\xd0\x36\x2f\x2a\x2d\x2d\x0a\x90\xcf\x1a\x5a\x4c\x5d\xb0\x2d\x56\xec\xc4\xc5\xbf\x34\x00\x72\x08\xd5\xb8\x87\x18\x58\x65",
    },
    // { SHA_256, true, 2, 1,
    //     32, "\x06\xa6\xb8\x8c\x58\x53\x36\x1a\x06\x10\x4c\x9c\xeb\x35\xb4\x5c\xef\x76\x00\x14\x90\x46\x71\x01\x4a\x19\x3f\x40\xc1\x5f\xc2\x44",
    //     80, "\xb0\xb1\xb2\xb3\xb4\xb5\xb6\xb7\xb8\xb9\xba\xbb\xbc\xbd\xbe\xbf\xc0\xc1\xc2\xc3\xc4\xc5\xc6\xc7\xc8\xc9\xca\xcb\xcc\xcd\xce\xcf\xd0\xd1\xd2\xd3\xd4\xd5\xd6\xd7\xd8\xd9\xda\xdb\xdc\xdd\xde\xdf\xe0\xe1\xe2\xe3\xe4\xe5\xe6\xe7\xe8\xe9\xea\xeb\xec\xed\xee\xef\xf0\xf1\xf2\xf3\xf4\xf5\xf6\xf7\xf8\xf9\xfa\xfb\xfc\xfd\xfe\xff",
    //     0, NULL,
    //     82, "\xb1\x1e\x39\x8d\xc8\x03\x27\xa1\xc8\xe7\xf7\x8c\x59\x6a\x49\x34\x4f\x01\x2e\xda\x2d\x4e\xfa\xd8\xa0\x50\xcc\x4c\x19\xaf\xa9\x7c\x59\x04\x5a\x99\xca\xc7\x82\x72\x71\xcb\x41\xc6\x5e\x59\x0e\x09\xda\x32\x75\x60\x0c\x2f\x09\xb8\x36\x77\x93\xa9\xac\xa3\xdb\x71\xcc\x30\xc5\x81\x79\xec\x3e\x87\xc1\x4c\x01\xd5\xc1\xf3\x43\x4f\x1d\x87",
    // },
    { SHA_256, true, 2, 1,
        32, "\x19\xef\x24\xa3\x2c\x71\x7b\x16\x7f\x33\xa9\x1d\x6f\x64\x8b\xdf\x96\x59\x67\x76\xaf\xdb\x63\x77\xac\x43\x4c\x1c\x29\x3c\xcb\x04",
        0, NULL,
        0, NULL,
        42, "\x8d\xa4\xe7\x75\xa5\x63\xc1\x8f\x71\x5f\x80\x2a\x06\x3c\x5a\x31\xb8\xa1\x1f\x5c\x5e\xe1\x87\x9e\xc3\x45\x4e\x5f\x3c\x73\x8d\x2d\x9d\x20\x13\x95\xfa\xa4\xb6\x1a\x96\xc8",
    },
    { SHA_256, true, 0, 4,
        32, "\x1c\xee\x66\x4f\x90\x1e\x5b\xba\x5f\x18\x79\xa3\x75\xad\x6b\xa2\x79\x56\x28\x5c\x42\x78\xd7\x7a\x57\x17\x03\x8a\xec\x6f\xf0\xfc",
        51, "\x9d\x43\x70\xa0\x85\x0f\x7b\xb4\x70\x71\xa7\xb4\x33\x20\x7d\x9c\xf5\x8b\x9a\x21\xf5\xaf\x70\x21\x52\x2c\x8f\x41\x01\x01\x7e\x14\x3c\x35\xb2\xe7\xae\x00\x86\x6c\xdf\xf0\xfe\x87\x29\x54\x0d\xa2\x2c\xad\x5e",
        0, NULL,
        64, "\x22\xd2\xea\xd6\x42\xc3\x21\x58\x40\x00\xd0\x95\x67\xa8\xa4\xc1\x4a\x71\x83\x9f\xd7\x2f\xf8\x08\x8f\x09\x9c\x81\xfe\x7c\x71\x75\xac\xa9\x05\x9c\x35\xd5\xcc\x75\xc8\x3f\xb2\x1d\x8c\x72\x83\x64\x39\xdd\x2b\x5e\x03\x8b\x43\x61\xe4\xf8\x7e\x99\x0d\xf2\x9d\xb1",
    },
    { SHA_256, true, 1, 2,
        32, "\x16\xe7\x09\x6d\xdf\x96\xb0\xd8\x61\xf3\x1e\x7a\x6b\x33\x75\x4b\x04\x5c\x5e\x71\x07\xea\x6c\xe0\x69\x8f\x91\xc6\x9c\x8e\x4d\xce",
        51, "\xe3\x2e\x45\xc1\x40\x88\x8b\x8b\x64\xc8\x4d\xa9\x85\x24\x61\xd2\x9c\x11\xb2\xee\x34\xda\x2a\xae\x63\x58\x21\xda\x94\x91\x4f\x3f\x3f\x2e\xfd\x81\xeb\xc9\x43\x48\x40\xa1\x74\xc3\x2c\xef\x2a\x87\xd5\x67\x46",
        32, "\xeb\x44\x12\xd0\x66\x5a\xb1\x3b\x74\xc1\xad\x09\xd5\xe3\xde\x00\x31\x38\x0e\x56\x43\x04\x59\xc5\x43\x91\x7f\x58\x0d\x3d\x8b\x7b",
        64, "\x33\x17\x54\x06\xd2\x5a\xe0\xa7\x64\x72\x68\xf5\x48\xdc\x94\x8c\x21\xd4\x21\x53\x62\xe1\x1a\x66\x77\x91\x44\xa8\x8f\x44\xdd\xc0\x74\xe2\xdf\x85\x31\x52\xd8\x7c\x55\xc7\x9e\x47\xbe\xb8\x51\xfa\x21\x6b\xd2\xfa\x04\xda\x42\x5a\x1d\x7b\xcd\x2e\xdd\xe7\x06\xc2",
    },
    { SHA_256, true, 2, 3,
        32, "\xdf\x99\xdb\x5d\xbd\x23\xca\xab\x69\x6c\x2d\x26\xa4\x36\x41\xe2\xde\x62\xeb\x8d\xfa\xc8\x4b\x7b\x0e\x39\x58\x27\xd4\x50\xd4\xee",
        51, "\x3d\x0b\x22\x1f\x53\x4d\x74\x58\xf1\xb6\xf0\x5b\x98\xdb\x30\xcd\x07\x76\xc4\x96\xb4\xa6\x32\x31\x3a\xf5\x91\x5a\x5d\x7f\x15\xd8\x4c\xc9\x8d\x31\xc8\x96\xe8\x01\xac\xf0\x7e\xfd\x04\x68\x06\x45\xe0\x91\x18",
        32, "\x82\x51\x2d\x32\x9c\x16\xb7\x03\xff\xdf\xa8\x4c\xba\x35\xdc\x84\x6f\xfe\x5e\x7f\x79\xdf\xf5\xf6\xa2\x15\x72\x15\x10\x36\x09\x39",
        64, "\x7f\xef\x9c\xa5\x27\x22\xeb\x73\x04\xd4\x58\x54\xdd\xc1\x3d\x17\x0d\x7d\xd8\xf4\x52\x27\x7f\x44\x97\xca\xc0\x05\xc1\x45\xbc\x82\x41\xc2\x0d\x71\x00\xbb\x0f\x03\xc3\x14\xd3\xc0\xbe\x37\xf9\xf9\x9e\x63\x48\x88\xe4\x86\x85\x5b\xe0\x70\xfd\x62\x83\xcd\xc0\xc1",
    },
#endif
    { SHA_256, true, 0, 0,
        32, "\x4b\x02\xff\xb1\xcb\x99\x87\x49\x6e\x19\x87\x25\x97\xb0\x26\xf7\x40\x9d\x92\x43\x3f\x91\x35\x06\x8c\x29\x30\x79\x85\x59\x85\x86",
        51, "\xa3\x8f\x30\x84\x41\x36\xc3\x3e\x00\xd4\x25\x4a\x8b\xc5\xf5\x1e\x84\x73\xac\x20\xe5\x62\x8e\x77\xe4\xd9\x1a\x70\x4d\x58\xbf\x0d\x4d\x0f\xef\xb5\xf9\x2d\x89\x7f\x19\x58\xb0\xaf\x18\x81\x80\xb2\xe2\xd2\xf7",
        32, "\x5c\x2a\x22\x62\xd1\x49\x94\x90\x4c\x9c\x2d\xe3\x6d\x66\xc7\xeb\xda\xed\x32\xb5\xcc\x44\x1c\x22\x22\x58\x85\x7f\x5a\xf2\x9b\xea",
        64, "\xef\x46\xa7\xcc\x3f\x2f\xd3\xaa\xc2\xd5\x5c\x73\x86\xb9\x92\x79\x09\x8a\xd8\xaf\x07\xe1\x13\xc6\x83\xe4\x36\x01\xd3\xe0\xc9\xa4\x81\x65\xa5\x80\xd6\x0b\x9c\x2d\xf7\x5c\xdf\xc0\x66\x85\x56\x07\xc0\xdd\x51\xad\x8f\xc0\x29\x6c\x3f\x72\xe8\x3d\x3d\x57\x42\xe2",
    },
};

#endif /* __PUFS_TV_HKDFEXP_H__ */
